package types

import (
	"testing"

	"github.com/davecgh/go-spew/spew"
)

func TestApplyPartial(t *testing.T) {
	data := conData(1, 2.0, "three", uint(4), (uint(1) << 5), "six").(slice)

	lambds := []lambdaFn{}
	var cy func(...Data) Data

	for i, dat := range data.Slice() {
		l := newLambda(encloseData(dat), dat.Flag())
		lambds = append(lambds, l)
		if i%2 == 0 {
			cy = fx(lambds[i], encloseData(dat).(lambdaFn))
		}
	}

	spew.Dump(cy)
	spew.Dump(cy())
	spew.Dump(lambds[0]())
}

func TestFunctionComposition(t *testing.T) {

	helloWorld := func(...Data) Data { return conData("hello, world!") }
	helloData := conData("hello World data")

	lam := composeLambda(helloWorld, String.Flag())
	clo := enclsoseLambda(lam)
	enc := encloseData(helloData)

	spew.Dump(enc)
	spew.Dump(clo)
	spew.Dump(lam)
}
