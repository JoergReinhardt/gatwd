// Code generated by "stringer -type=Otype"; DO NOT EDIT.

package parse

import "strconv"

const _Otype_name = "DataConstructorDynamicFunctionClosureDynamicDataConstructorStaticFunctionClosureStaticPartialApplicationCallContinuationByteCodeObjectIndirectionBlackHoleThunkValueArrayIOSyncIOAsyncIOShared"

var _Otype_map = map[Otype]string{
	1:     _Otype_name[0:22],
	2:     _Otype_name[22:44],
	4:     _Otype_name[44:65],
	8:     _Otype_name[65:86],
	16:    _Otype_name[86:104],
	32:    _Otype_name[104:120],
	64:    _Otype_name[120:134],
	128:   _Otype_name[134:145],
	256:   _Otype_name[145:154],
	512:   _Otype_name[154:159],
	1024:  _Otype_name[159:164],
	2048:  _Otype_name[164:169],
	4096:  _Otype_name[169:175],
	8192:  _Otype_name[175:182],
	16384: _Otype_name[182:190],
}

func (i Otype) String() string {
	if str, ok := _Otype_map[i]; ok {
		return str
	}
	return "Otype(" + strconv.FormatInt(int64(i), 10) + ")"
}
